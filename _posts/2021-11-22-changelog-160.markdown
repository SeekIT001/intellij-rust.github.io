---
layout: post
title: "IntelliJ Rust Changelog #160"
date: 2021-11-22 13:00:00 +0300
---

## New Features

* [#7996] Enable [crates local index](https://github.com/intellij-rust/intellij-rust/issues/6463) on stable to provide analysis for dependencies inside `Cargo.toml` manifest. Currently, it offers completions for `crates.io` dependencies' names and versions, and automatically updates with cargo crates index updates

* [#8031] Add ``Merge `if`s`` intention

  {% include gif-img.html path="/assets/posts/changelog-160/merge_if" w="700px" %}

* [#8030] Add `Condition of 'if' expression is constant` inspection which works for both always `true` and always `false` if-conditions. The `Redundant else` inspection now checks only irrefutable patterns.

  {% include gif-img.html path="/assets/posts/changelog-160/simplify_if" w="700px" %}

* [#7900] Resolve references to [`Index` trait](https://doc.rust-lang.org/std/ops/trait.Index.html) implementations for brackets (`[`, `]`) inside indexing expressions (by [@Kobzol])

  {% include gif-img.html path="/assets/posts/changelog-160/resolve_index_from_brackets" w="800px" %}

* [#7826] Add intention to unwrap a (tuple struct or enum variant) constructor from a single expression. Could be useful when you're adding or removing `Option` or `Result` from function signatures during refactoring (by [@Kobzol])

  {% include gif-img.html path="/assets/posts/changelog-160/unwrap_tuple_constructor" w="800px" %}

* [#7799] Support [if let guard](https://rust-lang.github.io/rfcs/2294-if-let-guard.html) syntax

  {% include gif-img.html path="/assets/posts/changelog-160/if_let_guard" w="800px" %}

* [#7725] Take into account all kinds of items generated by [custom derive procedural macros](https://doc.rust-lang.org/reference/procedural-macros.html#derive-macros). Previously only `impl` blocks were accounted. Please, note that procedural macro expansion is experimental. If you want to try it, enable `org.rust.cargo.evaluate.build.scripts` and `org.rust.macros.proc` experimental features

* [#8102] [#8042] Enable [`Change signature` refactoring](https://plugins.jetbrains.com/plugin/8182-rust/docs/rust-refactorings.html#change-sign) when a type of a trait method parameter changes (by [@Kobzol])

* [#7840] The intention for removing braces from a single expression now also works for blocks that contain a single statement (by [@Kobzol])

* [#6929] Detection of illegal lifetime names (by [@Stzx])

* [#7719] Support the [E0451](https://doc.rust-lang.org/error-index.html#E0451) compiler error ("a struct constructor with private fields was invoked") for struct field literals using [shorthand init](https://doc.rust-lang.org/reference/expressions/struct-expr.html#struct-field-init-shorthand) (by [@Kobzol])

## Performance Improvements

* [#8089] Avoid using potentially long-running computation inside the UI thread when invoking the [`Introduce constant`](https://plugins.jetbrains.com/plugin/8182-rust/docs/rust-refactorings.html#extractconst-refactoring) refactoring (by [@Kobzol])

* [#8043] Do not use potentially long-running operations on the UI thread in the `Change signature` refactoring (by [@Kobzol])

## Fixes

* [Build script](https://doc.rust-lang.org/cargo/reference/build-scripts.html) evaluation fixes. Note, build script evaluation is disabled by default. To turn it on, enable `org.rust.cargo.evaluate.build.scripts` [experimental feature](https://plugins.jetbrains.com/plugin/8182-rust/docs/rust-faq.html#experimental-features):

  * [#8012] Improve work with generated by build scripts. Now the plugin doesn't pollute `Project Structure` view with entries for generated `out` directories. Also, the custom paths of target directories are also supported

  * [#8056] Fix build script evaluation in [workspace](https://doc.rust-lang.org/book/ch14-03-cargo-workspaces.html). Now, the plugin properly evaluates scripts in all packages of the workspace

* [#8058] Resolve an associated type to a trait if the plugin doesn't sure about the concrete `impl`. This should fix a lot of errors related to type inference.

* [#8080] Render parentheses for type references in `Implement Members` refactoring

* [#8017] [#8015] Fix DeMorgan's law intention for multiple boolean operators and incorrectly omitted parens

* [#7959] Handle name collisions in `Introduce Constant` refactoring (by [@Kobzol])

* [#7775] `Introduce variable`: place new variable in lambda block when target expression is in lambda without braces (by [@t-kameyama])

* [#7770] `Add remaining patterns` quick-fix: add patterns even if no `match` body (by [@t-kameyama])

* [#8123] Fix exception during debugging in IDEA 2021.3

## Internal Improvements

* [#8098] Prevent future runtime errors during project opening because of incompatibility changes in future IDE versions

* [#8010] Annotate some code with `@Nls` and `@NlsContexts` annotations as part of preparations for localization

* [#7713] Speed up toolchain tests by caching some values from `rustc` and `cargo`

Full set of changes can be found [here](https://github.com/intellij-rust/intellij-rust/milestone/68?closed=1)

[@Kobzol]: https://github.com/Kobzol
[@Stzx]: https://github.com/Stzx
[@t-kameyama]: https://github.com/t-kameyama

[#6929]: https://github.com/intellij-rust/intellij-rust/pull/6929
[#7713]: https://github.com/intellij-rust/intellij-rust/pull/7713
[#7719]: https://github.com/intellij-rust/intellij-rust/pull/7719
[#7725]: https://github.com/intellij-rust/intellij-rust/pull/7725
[#7770]: https://github.com/intellij-rust/intellij-rust/pull/7770
[#7775]: https://github.com/intellij-rust/intellij-rust/pull/7775
[#7799]: https://github.com/intellij-rust/intellij-rust/pull/7799
[#7826]: https://github.com/intellij-rust/intellij-rust/pull/7826
[#7840]: https://github.com/intellij-rust/intellij-rust/pull/7840
[#7900]: https://github.com/intellij-rust/intellij-rust/pull/7900
[#7908]: https://github.com/intellij-rust/intellij-rust/pull/7908
[#7959]: https://github.com/intellij-rust/intellij-rust/pull/7959
[#7996]: https://github.com/intellij-rust/intellij-rust/pull/7996
[#8010]: https://github.com/intellij-rust/intellij-rust/pull/8010
[#8012]: https://github.com/intellij-rust/intellij-rust/pull/8012
[#8015]: https://github.com/intellij-rust/intellij-rust/pull/8015
[#8017]: https://github.com/intellij-rust/intellij-rust/pull/8017
[#8030]: https://github.com/intellij-rust/intellij-rust/pull/8030
[#8031]: https://github.com/intellij-rust/intellij-rust/pull/8031
[#8042]: https://github.com/intellij-rust/intellij-rust/pull/8042
[#8043]: https://github.com/intellij-rust/intellij-rust/pull/8043
[#8056]: https://github.com/intellij-rust/intellij-rust/pull/8056
[#8058]: https://github.com/intellij-rust/intellij-rust/pull/8058
[#8080]: https://github.com/intellij-rust/intellij-rust/pull/8080
[#8089]: https://github.com/intellij-rust/intellij-rust/pull/8089
[#8098]: https://github.com/intellij-rust/intellij-rust/pull/8098
[#8102]: https://github.com/intellij-rust/intellij-rust/pull/8102
[#8123]: https://github.com/intellij-rust/intellij-rust/pull/8123
