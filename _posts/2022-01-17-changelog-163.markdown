---
layout: post
title: "IntelliJ Rust Changelog #163"
date: 2022-01-17 13:00:00 +0300
---


## New Features

* [#8018] Add a widget for the [external linter](https://plugins.jetbrains.com/plugin/8182-rust/docs/rust-code-analysis.html#call-external-linter).
Widget indicates whether the linter is turned on. Also, the widget shows a notification when linter significantly affects the code analysis performance.
The external linter settings were moved to `Preferences | Languages & Frameworks | Rust | External Linters`

  <img src="/assets/posts/changelog-163/widget_init.png" width="700px"/>


  <img src="/assets/posts/changelog-163/widget_on.png" width="700px"/>


  <img src="/assets/posts/changelog-163/widget_disable.png" width="700px"/>

* [#8132] Add `Extract trait` refactoring (`Refactor | Extract trait`)

  {% include gif-img.html path="/assets/posts/changelog-163/extract_trait" w="700px" %}

* [#8315] Complete the second path segment if the first segment is unresolved but can be imported.

  {% include gif-img.html path="/assets/posts/changelog-163/complete_2nd_path_segment" w="700px" %}

* [#8284] Provide completion for out-of-scope items when invoked at an empty place (by <kbd>Ctrl</kbd>+<kbd>Space</kbd>).

* [#6353] Detect `Const cannot refer to static` [E0013](https://doc.rust-lang.org/error-index.html#E0013) compiler error  (by [@zeroeightysix])

* [#8144] Detect [E0747](https://doc.rust-lang.org/error-index.html#E0747) compiler error

* [#8289] Prioritize expressions that can be implicitly coerced to the expected type when suggesting completion variants

* [#8335] Do not run non-syntax inspections on files disabled by `cfg` attributes

* [#8323] Process available items generated by build script and expand available procedural macro calls even if the whole project host code (build scripts and procedural macro libraries) cannot be successfully compiled and executed.
Note, build script evaluation is disabled by default for now. To turn it on, enable `org.rust.cargo.evaluate.build.scripts` [experimental](https://plugins.jetbrains.com/plugin/8182-rust/docs/rust-faq.html#experimental-features) feature

* [#8119] Enable new name resolution inside functions bodies. It allows resolving [macros 2.0](https://rust-lang.github.io/rfcs/1584-macros.html) declared inside function bodies

## Fixes

* Auto-import improvements:
    * [#8291] Improve sorting of auto-import variants

    * [#8288] Fix auto-import from `alloc` crate when using [`#![no_std]`](https://docs.rust-embedded.org/book/intro/no-std.html)

    * [#8286] Don't show auto-import from auxiliary stdlib crates such as `unwind`

* [#8362] Do not produce a false-positive error about missing format macro arguments without `format_args_capture` feature starting with 1.58

* [#8334] Don't perform [project model reloading](https://plugins.jetbrains.com/plugin/8182-rust/docs/rust-cargo-tool-window.html#cargo-load) when another IDE project become [trusted](https://plugins.jetbrains.com/plugin/8182-rust/docs/rust-cargo-tool-window.html#trust-project)

* [#8318] Expand proc macros from `dev-dependencies`. Note, procedural macro expansion is still under development, and it's disabled by default for now. To turn it on, enable `org.rust.cargo.evaluate.build.scripts` and `org.rust.macros.proc` [experimental features](https://plugins.jetbrains.com/plugin/8182-rust/docs/rust-faq.html#experimental-features)

* [#8297] Fix default parameters handling in `Wrong number of type arguments` inspection

* [#8279] Fix resolve of imports inside detached files

* [#8269] Correctly parenthesize block-like expressions (e.g. `match`) in [`Inline Variable` refactoring](https://plugins.jetbrains.com/plugin/8182-rust/docs/rust-refactorings.html#extractvar-refactoring) (by [@Kobzol])

* [#8268] Fix type inference if there are dependencies named the same as stdlib crates

* [#8263] Infer generic parameter types in `Convert closure to function` intention (by [@Kobzol])

* [#8230]&nbsp;[`Introduce local variable` refactoring](https://plugins.jetbrains.com/plugin/8182-rust/docs/rust-refactorings.html#extractvar-refactoring) no longer moves the new binding into closure bodies if it is used outside of them (by [@afetisov])

* [#8228] Do not offer the `Add remaining patterns` quick-fix when pattern matching on an enum marked with `#[non_exhaustive]` if there are no wildcard arms in the `match` expression (by [@Kobzol])

* [#8216] Support usages in `serde` string attributes like [`#[serde(default = "path")]`](https://serde.rs/field-attrs.html#default--path) in `Unused import` inspection.
Note, the inspection is disabled by default and can be enabled in the [inspection settings]

* [#8187] Support indirect self-references in [`Move` refactoring](https://plugins.jetbrains.com/plugin/8182-rust/docs/rust-refactorings.html#move-refactoring) (`Refactor | Move` or <kbd>F6</kbd>)

* [#8185] Fix handling comments in `Invert if condition` intention

* [#8165] Fix `Invert if condition` intention when there is `return`/`continue` without semicolon

* [#8133] Fix rename quick-fix for module declaration by `Module naming convention` inspection

* [#7906] Fix `Run with Coverage` for projects located on WSL file system

* [#7814] Handle qualified field paths correctly in `Generate constructor` (`Code | Generate | Constructor`) refactoring (by [@Kobzol])

* [#7562] Don't hang on build when an incorrect path is used with `Redirect Input from` option

* [#8382] Fix stuck external linter errors

## Internal Improvements

* [#8363] Set up [dependabot](https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically) to update gradle dependencies automatically

* [#8316] Always generate Java-compatible byte code for interface methods with default implementation without `@JvmDefault` annotation

* [#8310] Update Kotlin language version to 1.6 and API version to 1.5. So now we can use new language features from [Kotlin 1.6](https://kotlinlang.org/docs/whatsnew16.html) and all API added in Kotlin 1.5

* [#8247] Make 2021 default edition in tests

* [#8175] Enable procedural macro expansion in regression tests

Full set of changes can be found [here](https://github.com/intellij-rust/intellij-rust/milestone/71?closed=1)

[@Kobzol]: https://github.com/Kobzol
[@afetisov]: https://github.com/afetisov
[@zeroeightysix]: https://github.com/zeroeightysix

[#6353]: https://github.com/intellij-rust/intellij-rust/pull/6353
[#7562]: https://github.com/intellij-rust/intellij-rust/pull/7562
[#7814]: https://github.com/intellij-rust/intellij-rust/pull/7814
[#7906]: https://github.com/intellij-rust/intellij-rust/pull/7906
[#8018]: https://github.com/intellij-rust/intellij-rust/pull/8018
[#8119]: https://github.com/intellij-rust/intellij-rust/pull/8119
[#8132]: https://github.com/intellij-rust/intellij-rust/pull/8132
[#8133]: https://github.com/intellij-rust/intellij-rust/pull/8133
[#8144]: https://github.com/intellij-rust/intellij-rust/pull/8144
[#8165]: https://github.com/intellij-rust/intellij-rust/pull/8165
[#8175]: https://github.com/intellij-rust/intellij-rust/pull/8175
[#8185]: https://github.com/intellij-rust/intellij-rust/pull/8185
[#8187]: https://github.com/intellij-rust/intellij-rust/pull/8187
[#8216]: https://github.com/intellij-rust/intellij-rust/pull/8216
[#8228]: https://github.com/intellij-rust/intellij-rust/pull/8228
[#8230]: https://github.com/intellij-rust/intellij-rust/pull/8230
[#8247]: https://github.com/intellij-rust/intellij-rust/pull/8247
[#8263]: https://github.com/intellij-rust/intellij-rust/pull/8263
[#8268]: https://github.com/intellij-rust/intellij-rust/pull/8268
[#8269]: https://github.com/intellij-rust/intellij-rust/pull/8269
[#8279]: https://github.com/intellij-rust/intellij-rust/pull/8279
[#8284]: https://github.com/intellij-rust/intellij-rust/pull/8284
[#8286]: https://github.com/intellij-rust/intellij-rust/pull/8286
[#8288]: https://github.com/intellij-rust/intellij-rust/pull/8288
[#8289]: https://github.com/intellij-rust/intellij-rust/pull/8289
[#8291]: https://github.com/intellij-rust/intellij-rust/pull/8291
[#8297]: https://github.com/intellij-rust/intellij-rust/pull/8297
[#8310]: https://github.com/intellij-rust/intellij-rust/pull/8310
[#8315]: https://github.com/intellij-rust/intellij-rust/pull/8315
[#8316]: https://github.com/intellij-rust/intellij-rust/pull/8316
[#8318]: https://github.com/intellij-rust/intellij-rust/pull/8318
[#8323]: https://github.com/intellij-rust/intellij-rust/pull/8323
[#8334]: https://github.com/intellij-rust/intellij-rust/pull/8334
[#8335]: https://github.com/intellij-rust/intellij-rust/pull/8335
[#8362]: https://github.com/intellij-rust/intellij-rust/pull/8362
[#8363]: https://github.com/intellij-rust/intellij-rust/pull/8363
[#8382]: https://github.com/intellij-rust/intellij-rust/pull/8382

[inspection settings]: https://plugins.jetbrains.com/plugin/8182-rust/docs/rust-code-analysis.html#inspection-settings
