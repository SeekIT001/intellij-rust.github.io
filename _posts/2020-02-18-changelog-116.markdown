---
layout: post
title: "IntelliJ Rust Changelog #116"
date: 2020-02-18 12:57:19 +0300
---


## New Features

* [#4914] Improve the new macro expansion engine in order to support nested modules declared with macros.
Now the plugin provides code completion and other code insight features for crates like `tokio` and
`async-std` in proper way. Note that you should enable the new macro expansion engine via
`Preferences | Languages & Frameworks | Rust | Expand declarative macros` option.

* [#4758] Support custom test attributes like `#[tokio::test]` (by [@Kobzol])

* [#4710] Add liveness analysis. Now unused local variables are highlighted as unused.

    {% include gif-img.html path="/assets/posts/changelog-116/liveness-analysis" w="700px" %}

* [#4913] Support impls for trait objects. Now the plugin provides name resolution and completion for
 items declared in `impl dyn Trait {}` (by [@rrevenantt])

* [#4734] Experimentally support items generated by [build scripts](https://doc.rust-lang.org/cargo/reference/build-scripts.html).
[Recently](https://intellij-rust.github.io/2019/11/04/changelog-109.html),
we did a first attempt to support build scripts.
In this release we're trying to use compiler output to get info about generated items. The output
contains all environment variables generated by a build script, so now we support not only `env!("OUT_DIR")`,
but any `env!("FOO_BAR")`. Also, it brings support of `cfg` options set by a build scripts, e.g. `#[cfg(foobar)]`.
To turn it on just enable `org.rust.cargo.evaluate.build.scripts` option in `Experimental Features` dialog.
Note that under the hood it uses `cargo check`, so this can significantly slow down project import.

* [#4952] Support referring to enum variants through type aliases from
[Rust 1.37](https://blog.rust-lang.org/2019/08/15/Rust-1.37.0.html#referring-to-enum-variants-through-type-aliases)

* [#4942], [#4946] Comments generated by `Comment with /` action (<kbd>Ctrl+/</kbd>/<kbd>Cmd+/</kbd>) now follow Rustfmt style.
You can change this behavior in `File | Settings | Editor | Code Style | Rust | Code Generation`.
(by [@SeekingMeaning])

* `Implement members` quick fix improvements:
  * [#4938] Do not expand type aliases (by [@Kobzol])
  * [#4772] Select content of the first item after generation of missing items (by [@Kobzol])
  * [#4910] Generate `Fn`-family traits in the correct way (by [@rrevenantt])

## Performance Improvements

* [#4925] Function bodies are now skipped by the parser during indexation. This speeds up the indexation process by about 20%
and improves macro expansion speed (if you use the experimental expansion engine).

* [#4862] Function bodies are now parsed incrementally. This means that when you're typing in a function body,
only the body will be re-parsed. This can speed up code completion in large documents.

* [#4950] Slightly optimized parser

## Fixes

* [#4955] Correctly parse `crate`-qualified paths in tuple struct fields (`struct Foo(crate::foo::Bar)`)

* [#4939] Fix "Run with coverage" on 2020.1

* [#4932] Take into account type aliases in `Type Info` action (<kbd>ctrl+P</kbd>) (by [@Kobzol])

* [#4919] Show Cargo tool window after attaching a first cargo project

* [#4849] Fix type checking for async blocks

* [#4847] Highlighting improvements:
  * Fix highlighting blinking on the dark theme
  * Don't incorrectly highlight a variable as primitive type if it has primitive type name like `let i32 = 1;`
  * Fix highlighting of string literals inside attributes like `#[foo("bar")]`

* [#4783] Display `?Sized` trait bound properly for `impl` blocks in
[structure view](https://www.jetbrains.com/help/idea/viewing-structure-of-a-source-file.html) (by [@rrevenantt])

* REPL integration improvements:
  * [#4879] Rust REPL now is not experimental. You can find it in `Tools | Rust REPL` (by [@dima74])
  * [#4880] Don't add commands with errors to completion context (by [@dima74])

## Internal Improvements

* [#4948] New parser benchmark

Full set of changes can be found [here](https://github.com/intellij-rust/intellij-rust/milestone/24?closed=1)

[@Kobzol]: https://github.com/Kobzol
[@SeekingMeaning]: https://github.com/SeekingMeaning
[@dima74]: https://github.com/dima74
[@rrevenantt]: https://github.com/rrevenantt


[#4710]: https://github.com/intellij-rust/intellij-rust/pull/4710
[#4734]: https://github.com/intellij-rust/intellij-rust/pull/4734
[#4758]: https://github.com/intellij-rust/intellij-rust/pull/4758
[#4772]: https://github.com/intellij-rust/intellij-rust/pull/4772
[#4783]: https://github.com/intellij-rust/intellij-rust/pull/4783
[#4847]: https://github.com/intellij-rust/intellij-rust/pull/4847
[#4849]: https://github.com/intellij-rust/intellij-rust/pull/4849
[#4862]: https://github.com/intellij-rust/intellij-rust/pull/4862
[#4879]: https://github.com/intellij-rust/intellij-rust/pull/4879
[#4880]: https://github.com/intellij-rust/intellij-rust/pull/4880
[#4910]: https://github.com/intellij-rust/intellij-rust/pull/4910
[#4913]: https://github.com/intellij-rust/intellij-rust/pull/4913
[#4914]: https://github.com/intellij-rust/intellij-rust/pull/4914
[#4919]: https://github.com/intellij-rust/intellij-rust/pull/4919
[#4925]: https://github.com/intellij-rust/intellij-rust/pull/4925
[#4932]: https://github.com/intellij-rust/intellij-rust/pull/4932
[#4938]: https://github.com/intellij-rust/intellij-rust/pull/4938
[#4939]: https://github.com/intellij-rust/intellij-rust/pull/4939
[#4942]: https://github.com/intellij-rust/intellij-rust/pull/4942
[#4946]: https://github.com/intellij-rust/intellij-rust/pull/4946
[#4948]: https://github.com/intellij-rust/intellij-rust/pull/4948
[#4950]: https://github.com/intellij-rust/intellij-rust/pull/4950
[#4952]: https://github.com/intellij-rust/intellij-rust/pull/4952
[#4955]: https://github.com/intellij-rust/intellij-rust/pull/4955