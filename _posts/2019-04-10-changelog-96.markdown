---
layout: post
title: "IntelliJ Rust Changelog #96"
date: 2019-04-10 18:00:26 +0300
---


## New Features

* Introduce experimental version of new macro expansion engine.
Turning it on the plugin can correctly process modules and `impl` blocks generated by macros.
It means that all intellisence features like highlighting, name resolution, completion, etc.
work with generated modules and methods from `impl` blocks as expected.
The new engine is not enabled by default for now.
You can choose it via `Preferences | Languages & Frameworks | Rust | Expand declarative macros` option.
If you have any problem related to the new macro expansion engine,
please file an issue in our [tracker](https://github.com/intellij-rust/intellij-rust/issues/new)

* Improve language support:
  * Support `extern_crate_self` syntax that will be stabilized in Rust 1.34.
   See the corresponding tracking [issue](https://github.com/rust-lang/rust/issues/56409) for more details
  * Support C-variadic functions. See the corresponding [RFC](https://github.com/rust-lang/rfcs/blob/master/text/2137-variadic.md) for more details

* Debugger improvements:
  * Provide LLDB formatters for [`HashMap`](https://user-images.githubusercontent.com/4854600/55416553-a89f6b80-5577-11e9-9e90-63de75ab4987.png) and [`HashSet`](https://user-images.githubusercontent.com/4854600/55416566-ae954c80-5577-11e9-9a84-38fd072e4ad3.png) collections. Note, these formatters require Rust 1.33 or above to work properly
  * Now `Step Over`, `Step Into`, and other debugger actions correctly work with stdlib code.

    {% include gif-img.html path="/assets/posts/changelog-96/support-stdlib-during-debugging-stepping" w="700px" %}

* External tools integration improvements:
  * Initial Valgrind Memcheck support in CLion since 2019.1. At this moment it's available only on Linux and macOS.
   You can read more about Valgrind configuring [here](https://www.jetbrains.com/help/clion/memory-profiling-with-valgrind.html#start)
  * You don't need to install `rustfilt` to get human readable function names and `Jump to Source` action in macOS profiler.
   Now the plugin provides these features out-of-the-box

* Add `Use destructuring declaration` intention

  {% include gif-img.html path="/assets/posts/changelog-96/use-destructuring-declaration-intention" w="700px" %}

* Completion improvements:
  * Reorder completion list. Now local items have higher priority and should be placed at the top of the completion list
  * Highlight deprecated items and move them at the bottom while completion (by [@isamborskiy])

* Show documentation of the corresponding trait item if element documentation is empty

* Add `Remove dbg!` intention (by [@gfreezy])

  {% include gif-img.html path="/assets/posts/changelog-96/remove-dbg-intention" w="700px" %}

* Add `impl` and `implt` live templates

  {% include gif-img.html path="/assets/posts/changelog-96/impl-live-template" w="700px" %}

* Provide name resolution and completion for builtin macros like `assert`, `include`, etc.

## Fixes

* Prevent stack overflow while name resolution

* Do not reparse files while analyzing code by inspections if possible.
Previously, some inspections triggered non opened file reparsing. It should slightly decrease memory consumption

* Fix regression related to MSVC toolchain detection on start of debug session.
Now the plugin correctly notify user that `MSVC toolchain` is not supported

* Do not show false positive error annotation about duplicate parameter with function parameters
like `fn foo(x: i32, f: fn(x: i32, y: i32))`

* Fix wrong type inference for empty structs

* Import items only one time when multiple carets are used (by [@SomeoneToIgnore])

* Correctly highlighting `crate` and `Self` keywords

* Do not interfere to renaming refactoring in JavaScript files.
Previously the plugin triggered on each renaming even non related to rust code

## Internal Improvements

* Implement proper Rust project settings migration

* Update IDEA & CLion




[@SomeoneToIgnore]: https://github.com/SomeoneToIgnore
[@gfreezy]: https://github.com/gfreezy
[@isamborskiy]: https://github.com/isamborskiy
